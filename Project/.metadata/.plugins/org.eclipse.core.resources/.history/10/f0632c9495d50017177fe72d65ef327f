package Users.Employees;
import Users.*;
import Users.Other.Parent;
import Users.Other.Student;
import Storage.*;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;
import java.util.Map;

import Other.View;
import Other.ViewFunctions;

public class Admin extends Employee implements View {
	
	public Admin(String name, String surname, int id, int salary) {
		super(name, surname, id, salary, "Admin");
		functions.add("Add User"); // +
		functions.add("Delete User"); // -
		functions.add("Update User"); // -
		functions.addAll(ViewFunctions.toAdd());
	}
	// Student +
	// Parent + 
	// ORWoreker + 
	// Admin + 
	// Executor
	// Teacher +
	// Parents
	
	public static void save (Map <Integer, Admin> admins) throws IOException {
		try {
			FileOutputStream fos2 = new FileOutputStream("admins.out");
			ObjectOutputStream oos2 = new ObjectOutputStream(fos2);
			oos2.writeObject(admins);
			fos2.close();
			oos2.close();
		} catch (FileNotFoundException e) {
			System.out.println("Error In Save Admin");
		}
	}
	public static Map < Integer, Admin> getAdmins() throws IOException, ClassNotFoundException {
		try {
			FileInputStream fis2 = new FileInputStream("admins.out");
			ObjectInputStream oin2 = new ObjectInputStream(fis2);
			Map<Integer, Admin> admins = (HashMap<Integer, Admin>) oin2.readObject();
			oin2.close();
			fis2.close();
			return admins;
		} catch (FileNotFoundException e) {
			System.out.println("Error In get Admin");
			return new HashMap <Integer, Admin>();
		}
		
	}


	public void addUser(Object o) {
		User u = (User) o;
		Storage.users.put(u.id, u);
		if (u.type.equals("Student")) {
			Student s = (Student) o;
			Storage.students.put(u.id, s);
		}
		else if (u.type.equals("Parent")) {
			Parent p = (Parent) o;
			Storage.parents.put(u.id, p);
		}
		else if (u.type.equals("ORworker")) {
			ORworker or = (ORworker) o;
			Storage.ORworkers.put(u.id, or);
		}
		else if (u.type.equals("Admin")) {
			Admin a = (Admin) o;
			Storage.admins.put(u.id, a);
		}
		else if (u.type.equals("Teacher")) {
			Teacher t = (Teacher) o;
			Storage.teachers.put(u.id, t);
		}
	}
	public void delUser(int id) {
		Storage.users.put(id, null);
		Storage.students.put(id, null);
		Storage.teachers.put(id, null);
		Storage.parents.put(id, null);
		Storage.ORworkers.put(id, null);
		Storage.admins.put(id, null);
	}
	@Override
	public String viewGpa(int id) {
		// TODO Auto-generated method stub
		return ViewFunctions.viewGpa(id);
	}
	@Override
	public void viewAttandance(int id) {
		// TODO Auto-generated method stub
		ViewFunctions.viewAttandance(id);
	}
	@Override
	public String viewTranscript(int id) {
		// TODO Auto-generated method stub
		return ViewFunctions.viewTranscript(id);
	}
	@Override
	public void viewNews() {
		// TODO Auto-generated method stub
		ViewFunctions.viewNews();
	}
}
